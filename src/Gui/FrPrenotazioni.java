

package Gui;

import it.sauronsoftware.cron4j.Scheduler;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import salaprove.AscoltaAvvisi;
import salaprove.Avvisi;
import salaprove.Generic;
import salaprove.Sale;


public class FrPrenotazioni extends javax.swing.JFrame {

    /** Modello della Jtable per il calendario
     */
    MdS oMdS;
    /** Modello della Jtable per le sale
     */
    MdSsale oMdSsale;
    /** Modello della Jtable per le fasce orarie
     */
    MdSfascia oMdSfascia;
    /** Giorni in un mese
     */
    private int Gennaio      = 31;
    private int Febbraio     = 29;
    private int Marzo        = 31;
    private int Aprile       = 30;
    private int Maggio       = 31;
    private int Giugno       = 30;
    private int Luglio       = 31;
    private int Agosto       = 31;
    private int Settembre    = 30;
    private int Ottobre      = 31;
    private int Novembre     = 30;
    private int Dicembre      = 31;
    // data odierna  necessaria per la ricerca delle prenotazioni
    private String DATAODIERNA = "";

    private Vector vtDati = new Vector();
    


    /** Creates new form FrPrenotazioni */
    public FrPrenotazioni() {
        initComponents();
              
        settaImmaginiPulsanti();
        impostaJTRighe();
        impostaJTRigheSale();
        impostaJTRigheFasceOrarie();
        Default();
        impostaData();
        caricaSale();
        caricaPrenotazioni();

        Thread t = new Thread(new Runnable() {
        public void run() {
           ricavaAvvisi();
         }
        });

        t.start();

       
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpSelezione = new javax.swing.JTabbedPane();
        jpDettaglio = new javax.swing.JPanel();
        jp1 = new javax.swing.JPanel();
        scrollCalendario = new javax.swing.JScrollPane();
        jTableCalendario = new javax.swing.JTable();
        jcbMese = new javax.swing.JComboBox();
        numAnno = new javax.swing.JTextField();
        jbtSinistra = new javax.swing.JButton();
        jbtDestra = new javax.swing.JButton();
        jpSale = new javax.swing.JPanel();
        scrollSale = new javax.swing.JScrollPane();
        jTableSale = new javax.swing.JTable();
        jcbOra = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        scrollFascia = new javax.swing.JScrollPane();
        jTableFascia = new javax.swing.JTable();
        jpInfo = new javax.swing.JPanel();
        jtfTotale = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jpLeggiPren = new javax.swing.JPanel();
        jpLista = new javax.swing.JPanel();
        scrollLista = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jpRicerca = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jbtNuovo = new javax.swing.JButton();
        jbtModifica = new javax.swing.JButton();
        jbtElimina = new javax.swing.JButton();
        jbtRicerca = new javax.swing.JButton();
        jbtEsci = new javax.swing.JButton();
        jpUtente = new javax.swing.JPanel();
        lblNome = new javax.swing.JLabel();
        lblCognome = new javax.swing.JLabel();
        menuBarra = new javax.swing.JMenuBar();
        menu1 = new javax.swing.JMenu();
        menuInsert = new javax.swing.JMenuItem();
        menu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIstema di Prenotazione Sale Audio");

        jTableCalendario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableCalendario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCalendarioMouseClicked(evt);
            }
        });
        jTableCalendario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableCalendarioKeyPressed(evt);
            }
        });
        scrollCalendario.setViewportView(jTableCalendario);

        jcbMese.setMaximumRowCount(12);
        jcbMese.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" }));
        jcbMese.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbMeseItemStateChanged(evt);
            }
        });

        numAnno.setEditable(false);
        numAnno.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jbtSinistra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSinistraActionPerformed(evt);
            }
        });

        jbtDestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDestraActionPerformed(evt);
            }
        });

        jpSale.setBackground(new java.awt.Color(102, 102, 102));

        jTableSale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableSale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSaleMouseClicked(evt);
            }
        });
        scrollSale.setViewportView(jTableSale);

        jcbOra.setMaximumRowCount(12);
        jcbOra.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30 Minuti", "1 Ora", "2 Ore", "3 Ore", "1 Giorno" }));
        jcbOra.setSelectedIndex(1);
        jcbOra.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbOraItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Durata:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Fasce orarie disponibili");

        jTableFascia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableFascia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFasciaMouseClicked(evt);
            }
        });
        scrollFascia.setViewportView(jTableFascia);

        javax.swing.GroupLayout jpSaleLayout = new javax.swing.GroupLayout(jpSale);
        jpSale.setLayout(jpSaleLayout);
        jpSaleLayout.setHorizontalGroup(
            jpSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSaleLayout.createSequentialGroup()
                .addGroup(jpSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSaleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollSale, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
                    .addGroup(jpSaleLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jcbOra, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpSaleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpSaleLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2))
                            .addComponent(scrollFascia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jpSaleLayout.setVerticalGroup(
            jpSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSaleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbOra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollSale, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollFascia, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jLabel3.setText("Costo Totale:");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel4.setText("€");

        javax.swing.GroupLayout jpInfoLayout = new javax.swing.GroupLayout(jpInfo);
        jpInfo.setLayout(jpInfoLayout);
        jpInfoLayout.setHorizontalGroup(
            jpInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfTotale, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpInfoLayout.setVerticalGroup(
            jpInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInfoLayout.createSequentialGroup()
                .addContainerGap(142, Short.MAX_VALUE)
                .addGroup(jpInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4))
                    .addComponent(jtfTotale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jp1Layout = new javax.swing.GroupLayout(jp1);
        jp1.setLayout(jp1Layout);
        jp1Layout.setHorizontalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1Layout.createSequentialGroup()
                .addGroup(jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp1Layout.createSequentialGroup()
                        .addComponent(jcbMese, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtSinistra, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtDestra, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jp1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jpInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scrollCalendario, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jpSale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jp1Layout.setVerticalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1Layout.createSequentialGroup()
                .addGroup(jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jcbMese, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbtSinistra, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(numAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jbtDestra, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))
                    .addComponent(jpSale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jpDettaglioLayout = new javax.swing.GroupLayout(jpDettaglio);
        jpDettaglio.setLayout(jpDettaglioLayout);
        jpDettaglioLayout.setHorizontalGroup(
            jpDettaglioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDettaglioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpDettaglioLayout.setVerticalGroup(
            jpDettaglioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDettaglioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpSelezione.addTab("Dettaglio Prenotazione", jpDettaglio);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollLista.setViewportView(jTable1);

        javax.swing.GroupLayout jpListaLayout = new javax.swing.GroupLayout(jpLista);
        jpLista.setLayout(jpListaLayout);
        jpListaLayout.setHorizontalGroup(
            jpListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollLista, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
        );
        jpListaLayout.setVerticalGroup(
            jpListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollLista, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpLeggiPrenLayout = new javax.swing.GroupLayout(jpLeggiPren);
        jpLeggiPren.setLayout(jpLeggiPrenLayout);
        jpLeggiPrenLayout.setHorizontalGroup(
            jpLeggiPrenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLeggiPrenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpLeggiPrenLayout.setVerticalGroup(
            jpLeggiPrenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLeggiPrenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpSelezione.addTab("Lista Prenotazioni", jpLeggiPren);

        javax.swing.GroupLayout jpRicercaLayout = new javax.swing.GroupLayout(jpRicerca);
        jpRicerca.setLayout(jpRicercaLayout);
        jpRicercaLayout.setHorizontalGroup(
            jpRicercaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 815, Short.MAX_VALUE)
        );
        jpRicercaLayout.setVerticalGroup(
            jpRicercaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jtpSelezione.addTab("Ricerca", jpRicerca);

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jbtNuovo.setText("Nuovo");

        jbtModifica.setText("Modifica");

        jbtElimina.setText("Elimina");

        jbtRicerca.setText("Ricerca");

        jbtEsci.setText("Esci");
        jbtEsci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtEsciActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtNuovo, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtModifica, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtElimina, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtRicerca, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(jbtEsci, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtNuovo)
                    .addComponent(jbtModifica)
                    .addComponent(jbtElimina)
                    .addComponent(jbtRicerca)
                    .addComponent(jbtEsci))
                .addContainerGap())
        );

        jpUtente.setBackground(new java.awt.Color(255, 255, 166));
        jpUtente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "   Informazioni Utente di sistema   ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        javax.swing.GroupLayout jpUtenteLayout = new javax.swing.GroupLayout(jpUtente);
        jpUtente.setLayout(jpUtenteLayout);
        jpUtenteLayout.setHorizontalGroup(
            jpUtenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpUtenteLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(lblNome, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCognome, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(222, 222, 222))
        );
        jpUtenteLayout.setVerticalGroup(
            jpUtenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCognome, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        menu1.setText("Menù");

        menuInsert.setText("Registrazione Utenti");
        menuInsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuInsertMouseClicked(evt);
            }
        });
        menuInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInsertActionPerformed(evt);
            }
        });
        menu1.add(menuInsert);

        menuBarra.add(menu1);
        menu1.getAccessibleContext().setAccessibleName("Menu");

        menu2.setText("Impostazioni");
        menuBarra.add(menu2);

        setJMenuBar(menuBarra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpUtente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jtpSelezione, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtpSelezione, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpUtente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtEsciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtEsciActionPerformed
        this.dispose();
        Generic.avviaMascheraIniziale();
        
}//GEN-LAST:event_jbtEsciActionPerformed

    private void jcbMeseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbMeseItemStateChanged
       // carica il calendario ogni volta che varia qualcosa
       settaCalendario();
    }//GEN-LAST:event_jcbMeseItemStateChanged

    private void jbtSinistraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSinistraActionPerformed
        // scorre a ritroso l'anno
        this.numAnno.setText("" + scorri(0,this.numAnno.getText()));
        // carica gli elementi precedenti
        //getPrec();
        // carica il calendario ogni volta che varia qualcosa
        settaCalendario();
    }//GEN-LAST:event_jbtSinistraActionPerformed

    private void jbtDestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDestraActionPerformed
        // scorre in avanti l'anno
        this.numAnno.setText("" + scorri(1,this.numAnno.getText()));
        // carica gli elementi successivi
        //getSucc();
        // carica il calendario ogni volta che varia qualcosa
        settaCalendario();
    }//GEN-LAST:event_jbtDestraActionPerformed

    private void jcbOraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbOraItemStateChanged
        // carica le prenotazioni divise in fasce orarie
        visualizzaPrenotazioni();
    }//GEN-LAST:event_jcbOraItemStateChanged

    /**
     *  visualizza le prenotazioni in base alla sala scelta
     */
    private void visualizzaPrenotazioni(){
       // reimposta i campi
        impostaJTRigheFasceOrarie();
        // ricarica le prenotazioni
        caricaPrenotazioni();
    }
    private void jTableCalendarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCalendarioMouseClicked
        // al primo click carica i dati
        if(evt.getClickCount()==1){
             // carica le prenotazioni divise in fasce orarie
             visualizzaPrenotazioni();
	}

    }//GEN-LAST:event_jTableCalendarioMouseClicked

    private void jTableCalendarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCalendarioKeyPressed
        if(evt.getKeyCode()== 10){
	     // carica le prenotazioni divise in fasce orarie
             visualizzaPrenotazioni();
        }

    }//GEN-LAST:event_jTableCalendarioKeyPressed

    private void jTableSaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSaleMouseClicked
        // al primo click deve caricare le fasce orarie della sala selezionata
        if(evt.getClickCount()==1){
             // carica le prenotazioni divise in fasce orarie
             visualizzaPrenotazioni();
	}
        // al doppio click apre la schermata delle opzioni strumenti
        if(evt.getClickCount()==2){

             int cod_sala = 0;
             if(!Generic.strVuota("" + this.jTableSale.getValueAt(this.jTableSale.getSelectedRow(), this.dammiIndiceColonna(oMdSsale.colonnaCOD , jTableSale )).toString() )){
                cod_sala = Integer.parseInt(this.jTableSale.getValueAt(this.jTableSale.getSelectedRow(), this.dammiIndiceColonna(oMdSsale.colonnaCOD , jTableSale )).toString());
             }

             String descr = "";
             if(!Generic.strVuota("" + this.jTableSale.getValueAt(this.jTableSale.getSelectedRow(), this.dammiIndiceColonna(oMdSsale.colonnaDESCR , jTableSale )) )){
                descr = "" + this.jTableSale.getValueAt(this.jTableSale.getSelectedRow(), this.dammiIndiceColonna(oMdSsale.colonnaDESCR , jTableSale ));
             }

             BigDecimal costo = new BigDecimal("0");
             if(!Generic.strVuota("" + this.jTableSale.getValueAt(this.jTableSale.getSelectedRow(), this.dammiIndiceColonna(oMdSsale.colonnaCOSTO , jTableSale )) )){
                costo = new BigDecimal("" + this.jTableSale.getValueAt(this.jTableSale.getSelectedRow(), this.dammiIndiceColonna(oMdSsale.colonnaCOSTO , jTableSale )));
             }

             // visualizza le opzioni
             FrOpzioni oFrOpzioni = new FrOpzioni(cod_sala,descr,costo);
             oFrOpzioni.setModal(true);
             oFrOpzioni.setVisible(true);

	}
    }//GEN-LAST:event_jTableSaleMouseClicked

    private void jTableFasciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFasciaMouseClicked
        // al secondo click si possono inserire gli strumenti musicali per quella fascia
        if(evt.getClickCount()==1){

	}
    }//GEN-LAST:event_jTableFasciaMouseClicked

    private void menuInsertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuInsertMouseClicked
        
    }//GEN-LAST:event_menuInsertMouseClicked

    private void menuInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInsertActionPerformed
        FrUtenti oFrUtenti = new FrUtenti();

        oFrUtenti.setVisible(true);
    }//GEN-LAST:event_menuInsertActionPerformed

    /** Scorri l'anno o all'anno precedente o all'anno successivo
    */
    private int scorri(int verso, String Anno ){

        int AnnoNum = Generic.getAnno(Generic.getCurrentDateTime());
        if(!Generic.strVuota(Anno)){
            AnnoNum = Integer.parseInt(Anno);
        }
        if (verso == 0){
             AnnoNum = AnnoNum - 1;
        }else{
          AnnoNum = AnnoNum + 1;
        }


        return AnnoNum;
    }

    /** imposta il calendario alla data corrente
    */
    private void impostaData(){

       // calcola dalla data corrente il mese corretto
       int Mese = Integer.parseInt("" + Generic.getCurrentDateTime().getMonth());
       // anno corrente
       int AnnoCorrente = Generic.getAnno(Generic.getCurrentDateTime());
       // nella combo è da 0 a 10 mentre il mese viene incrementato
       int MeseNumerico = Mese+1;
       // setta la combo box
       this.numAnno.setText("" + AnnoCorrente );
       // calcolo del mese
       calcolaMese(MeseNumerico);
       jcbMese.setSelectedIndex(Mese);


       
    }

    /**
     * Centra la Maschera
     * @param b
     */
    public void setVisible(boolean b)
    {
        if(b)
            Generic.centraGui(this);
        super.setVisible(b);
    }

    /** Composizione della Data Corrente
    */
    private  String getDataOdierna(){
       String DataFinale = "";

       // calcola dalla data corrente il mese corretto
       int Mese = Integer.parseInt("" + Generic.getCurrentDateTime().getMonth());
       // anno corrente
       int Anno = Generic.getAnno(Generic.getCurrentDateTime());
       Mese = Mese+1;

       // si ricava il giorno
       int Giorno  = Generic.getGiorno(Generic.getCurrentDateTime());

       return DataFinale = this.verificaGiornoMeseAnno(Giorno, Mese, Anno);

    }

    /** verifica il giorno il mese e l'anno
    */
    private String verificaGiornoMeseAnno(int Giorno, int Mese, int Anno){
        String DataFinale = "";

        if (Giorno < 10){
            DataFinale = "0" + Giorno;
        }else{
            DataFinale = "" + Giorno;
        }

        if (Mese < 10){
            DataFinale = DataFinale + "/" + "0" + Mese + "/" + Anno ;
        }else{
            DataFinale = DataFinale + "/" + "" + Mese + "/" + Anno ;
        }

        return DataFinale;
    }

    /** setta il calendario alla data dierna
    */
    private void settaCalendario(){
	// Si ricava la Selezione
        int Mese = 0;
        if (this.jcbMese.getSelectedIndex() != -1)
           Mese = jcbMese.getSelectedIndex()+1;
        else
           Mese = -1;

        if(Mese != 0 || Mese != -1) calcolaMese(Mese);
    }

    /** al cambiamento di Stato Mi carica le righe del calendario in Base al mese
    */
    private void calcolaMese(int Mese){

       int GiornoCorrente = Generic.getGiorno(Generic.getCurrentDateTime());

       if(Mese == 1){
          elaboro(Gennaio,Mese,GiornoCorrente);
       }else if(Mese == 2){
          elaboro(Febbraio,Mese,GiornoCorrente);
       }else if(Mese == 3){
          elaboro(Marzo,Mese,GiornoCorrente);
       }else if(Mese == 4){
          elaboro(Aprile,Mese,GiornoCorrente);
       }else if(Mese == 5){
          elaboro(Maggio,Mese,GiornoCorrente);
       }else if(Mese == 6){
          elaboro(Giugno,Mese,GiornoCorrente);
       }else if(Mese == 7){
          elaboro(Luglio,Mese,GiornoCorrente);
       }else if(Mese == 8){
          elaboro(Agosto,Mese,GiornoCorrente);
       }else if(Mese == 9){
          elaboro(Settembre,Mese,GiornoCorrente);
       }else if(Mese == 10){
          elaboro(Ottobre,Mese,GiornoCorrente);
       }else if(Mese == 11){
          elaboro(Novembre,Mese,GiornoCorrente);
       }else if(Mese == 12){
          elaboro(Dicembre,Mese,GiornoCorrente);
       }

    }

    /** al cambiamento di Stato Mi cambia il giorno
    */
    private void calcolaGiorno(int Mese, int Giorno){

       int GiornoCorrente = Giorno;

       if(Mese == 1){
          elaboro(Gennaio,Mese,GiornoCorrente);
       }else if(Mese == 2){
          elaboro(Febbraio,Mese,GiornoCorrente);
       }else if(Mese == 3){
          elaboro(Marzo,Mese,GiornoCorrente);
       }else if(Mese == 4){
          elaboro(Aprile,Mese,GiornoCorrente);
       }else if(Mese == 5){
          elaboro(Maggio,Mese,GiornoCorrente);
       }else if(Mese == 6){
          elaboro(Giugno,Mese,GiornoCorrente);
       }else if(Mese == 7){
          elaboro(Luglio,Mese,GiornoCorrente);
       }else if(Mese == 8){
          elaboro(Agosto,Mese,GiornoCorrente);
       }else if(Mese == 9){
          elaboro(Settembre,Mese,GiornoCorrente);
       }else if(Mese == 10){
          elaboro(Ottobre,Mese,GiornoCorrente);
       }else if(Mese == 11){
          elaboro(Novembre,Mese,GiornoCorrente);
       }else if(Mese == 12){
          elaboro(Dicembre,Mese,GiornoCorrente);
       }

    }

    /** Imposta il default per la maschera
    */
    private void Default(){

       // imposta il calendario alla Data odierna
       this.DATAODIERNA = getDataOdierna();
       this.lblNome.setText("NOME: " + Generic.oUtente.nome);
       this.lblCognome.setText("COGNOME: " + Generic.oUtente.cognome);

    }

    //********** MODELLO PARTICOLARE PER LA GESTIONE DELLA JTABLE **********//
    private class MdS extends javax.swing.table.AbstractTableModel implements java.io.Serializable
    {
        /** Righe del profilo
        */
        private Vector vRigheModello;

        // Colonne del modello (final = Costanti)
        final private int  colonnaD          = 0;
        final private int  colonna2          = 1;
        final private int  colonna3          = 2;
        final private int  colonna4          = 3;
        final private int  colonna5          = 4;
        final private int  colonna6          = 5;
        final private int  colonna7          = 6;

        // definisco una variabile di tipo record
        final String[] columnNames = new String[7];

        private MdS()
        {
            // Inserisco nella variabile di tipo record
            // le intestazioni delle colonne
            columnNames[colonnaD]            = "Dom";
            columnNames[colonna2]            = "Lun";
            columnNames[colonna3]            = "Mar";
            columnNames[colonna4]            = "Mer";
            columnNames[colonna5]            = "Gio";
            columnNames[colonna6]            = "Ven";
            columnNames[colonna7]            = "Sab";
            //{{INIT_CONTROLS
		    //}}
        }

        // Imposta la righe associate al modello
        private void setProfilo(Vector vRighe)
        {
            this.vRigheModello = vRighe;
        }

        private Vector getProfilo()
        {
            return this.vRigheModello;
        }

        // Numero colonne JTABLE
        public int getColumnCount()
        {
            return columnNames.length;
        }

        // Numero righe JTABLE
        public int getRowCount()
        {
            if (this.vRigheModello == null)
                return 0;
            else
                return vRigheModello.size();
        }

        // Intestazione colonne JTABLE
        public String getColumnName(int col)
        {
            return columnNames[col];
        }

        // valore celle JTABLE
        // Legge il valore contenuto in una cella
        public Object getValueAt(int row, int col)
        {
            // row   =   riga
            // col   =   colonna

            // mi posizioni sulla riga desiderata
            Object[] Valori = (Object[])vRigheModello.elementAt(row);

            // mi posiziono sulla colonna desiderata
            switch (col)
            {

                case colonnaD:
                    return Valori[colonnaD];
                 case colonna2:
                    return Valori[colonna2];
                case colonna3:
                    return Valori[colonna3];
                case colonna4:
                    return Valori[colonna4];
                case colonna5:
                    return Valori[colonna5];
               case colonna6:
                    return Valori[colonna6];
                case colonna7:
                    return Valori[colonna7];
                default:
                    return "";
            }
        }

        
        public Class getColumnClass(int c)
        {
            return getValueAt(0, c).getClass();
        }

        /* Determina quali sono le celle editabili, e quando devono diventare editabili
         **/
        public boolean isCellEditable(int row, int col) {

            Object sVt[] = (Object[])vRigheModello.elementAt(row);
            //sPFOR = sVt[col].toString();
            //return col == 0 || col == 1 || col == 2 || col == 3 || StatoMaschera == 2 || StatoMaschera == 1;

            return false;
        }

        /**********************************************/
        /* Serve per impostare il valore ad una cella */
        /**********************************************/
        public void setValueAt(Object value, int row, int col)
        {
            Object oVal[] = (Object[])vRigheModello.elementAt(row);
                 switch (col)
                 {

                   case colonnaD:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaD] = "";
                        }else{
                            oVal[colonnaD] = value.toString();
                        }
                        break;
                    case colonna2:
                        if (value == null)
                        {
                            // Default
                            oVal[colonna2] = "";
                        }else{
                            oVal[colonna2] = value.toString();
                        }
                        break;

                    case colonna3:
                        if (value == null)
                        {
                            // Default
                            oVal[colonna3] = "";
                        }else{
                            oVal[colonna3] = value.toString();
                        }
                        break;

                    case colonna4:
                        if (value == null)
                        {
                            // Default
                            oVal[colonna4] = "";
                        }else{
                            oVal[colonna4] = value.toString();
                        }
                        break;
                    case colonna5:
                        if (value == null)
                        {
                            // Default
                            oVal[colonna5] = "";
                        }else{
                            oVal[colonna5] = value.toString();
                        }
                        break;

                        case colonna6:
                        if (value == null)
                        {
                            // Default
                            oVal[colonna6] = "";
                        }else{
                            oVal[colonna6] = value.toString();
                        }
                        break;

                        case colonna7:
                        if (value == null)
                        {
                            // Default
                            oVal[colonna7] = "";
                        }else{
                            oVal[colonna7] = value.toString();
                        }
                        break;

                    default:
                        System.out.println("SET RIGHE NON EDITABILI");

                }
                fireTableCellUpdated(row, col);
        }

        /************************/
        /* Rinfresca la JTABLE  */
        /************************/
        private void aggiorna()
        {
            fireTableDataChanged(); // Tell the listeners a new table has arrived.
        }

        /***********************************************/
        /*  Rinfresca la JTABLE per la riga cancellata */
        /***********************************************/
        private void cancella(int riga){
            this.fireTableRowsDeleted(riga, riga);
        }

	    //{{DECLARE_CONTROLS
	    //}}
    }


    //*********** FINE CLASSE SUPPORTO **********//

    // Classe per gestire il renderer della JTable
    // in teoria deve essere una classe di render per ogni
    // colonna.
    // In questo caso siccome tutte le colonne sono di tipo testo
    // viene usata una sola classe di render su tutte le colonne.
    private class RdSsale extends javax.swing.JTextField implements javax.swing.table.TableCellRenderer
    {
        // Impostazione dei colori di sfondo
        private Color COLOR_ROSSO    = new Color(254,95,90);
        private Color COLOR_GIALLO   = new Color(255,255,166);
        private Color COLOR_VERDE    = new Color(104,240,162);
        private Color COLOR_BIANCO   = java.awt.Color.white;
        private Color COLOR_AZZURRO  = new Color(217,230,249);
        private Color COLOR_ARANCIO  = new Color(255,151,81);
        private Color COLOR_VERDINO  = new Color(202,255,176);


	    public RdSsale()
	    {
	        super();
	    }

	/******************************************************/
        /* Il metodo viene richiamato dalla JTABLE in fase di */
        /* popolamento celle                                  */
        /******************************************************/
        public Component getTableCellRendererComponent(JTable table,
                                                       Object value,
                                                       boolean isSelected,
                                                       boolean hasFocus,
                                                       int row,
                                                       int column){
            /**************************************************************************/
            /* table      = Nome della tabella                                        */
            /* value      = Valore della cella                                        */
            /* isSelected = true  cella selezionata                                   */
            /*              false cella non selezionata                               */
            /* hasFocus   = true  ha il fuoco                                         */
            /*              false non ha il fuoco                                     */
            /* row        = riga                                                      */
            /* column     = posizione della colonna a video.                          */
            /*              Nel caso di drag and drop colonne è necessario convertire */
            /*              la colonna a video nella colonna reale.                   */
            /*    NB: in fase di init JTABLE è necessario utilizzare (setModelIndex)  */
            /**************************************************************************/

            // Prelevo il valore reale della colonna e la metto in colreale
            javax.swing.table.TableColumn tc = table.getColumnModel().getColumn(column);
            int colreale = tc.getModelIndex();
            //mr = (ModListaPresenti)table.getModel();

            // Colore delle righe
            if (isSelected)
            {
                // Imposto il colore di default
                setBackground(COLOR_GIALLO);
                setForeground(table.getSelectionForeground());
            }
            else
            {
                if ((row % 2) == 0)
                {
                    // le righe pari le metto con lo sfondo bianco
                    setBackground(COLOR_BIANCO);
                    setForeground(table.getForeground());
                }
                else
                {
                    // le righe dispari le metto con il colore azzurro
                    setBackground(COLOR_BIANCO);
                    setForeground(table.getForeground());
                }
            }
            setFont(table.getFont());

            // Formattazione dei valori
            if (value==null)
            {
                return null;
            }
            else{

                // Con switch problemi di costanti
                if (colreale == oMdSsale.colonnaCOD){
                    this.setHorizontalAlignment(RIGHT);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSsale.colonnaDESCR){
                    this.setHorizontalAlignment(LEFT);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSsale.colonnaMQ){
                    this.setHorizontalAlignment(RIGHT);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSsale.colonnaPIANO){
                    this.setHorizontalAlignment(RIGHT);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSsale.colonnaCOSTO){
                    this.setHorizontalAlignment(RIGHT);
                    this.setText(value.toString());
                }
                return this;
            }
	    }
    }
    //*********** FINE CLASSE SUPPORTO **********//

    // Classe per gestire il renderer della JTable
    // in teoria deve essere una classe di render per ogni
    // colonna.
    // In questo caso siccome tutte le colonne sono di tipo testo
    // viene usata una sola classe di render su tutte le colonne.
    private class RdSfascia extends javax.swing.JTextField implements javax.swing.table.TableCellRenderer
    {
        // Impostazione dei colori di sfondo
        private Color COLOR_ROSSO    = new Color(254,95,90);
        private Color COLOR_GIALLO   = new Color(255,255,166);
        private Color COLOR_VERDE    = new Color(104,240,162);
        private Color COLOR_VERDINO  = new Color(202,255,176);


        private RdSfascia()
        {
            super();
        }

	/******************************************************/
        /* Il metodo viene richiamato dalla JTABLE in fase di */
        /* popolamento celle                                  */
        /******************************************************/
        public Component getTableCellRendererComponent(JTable table,
                                                       Object value,
                                                       boolean isSelected,
                                                       boolean hasFocus,
                                                       int row,
                                                       int column){
            /**************************************************************************/
            /* table      = Nome della tabella                                        */
            /* value      = Valore della cella                                        */
            /* isSelected = true  cella selezionata                                   */
            /*              false cella non selezionata                               */
            /* hasFocus   = true  ha il fuoco                                         */
            /*              false non ha il fuoco                                     */
            /* row        = riga                                                      */
            /* column     = posizione della colonna a video.                          */
            /*              Nel caso di drag and drop colonne è necessario convertire */
            /*              la colonna a video nella colonna reale.                   */
            /*    NB: in fase di init JTABLE è necessario utilizzare (setModelIndex)  */
            /**************************************************************************/

            // Prelevo il valore reale della colonna e la metto in colreale
            javax.swing.table.TableColumn tc = table.getColumnModel().getColumn(column);
            int colreale = tc.getModelIndex();
            //mr = (ModListaPresenti)table.getModel();

            // Colore delle righe
            if (isSelected)
            {
                // Imposto il colore di default
               setBackground(COLOR_GIALLO);
                setForeground(table.getSelectionForeground());
            }
            else
            {
                if ((row % 2) == 0)
                {
                    // le righe pari le metto con lo sfondo bianco
                    setBackground(COLOR_VERDE);
                    setForeground(table.getForeground());
                }
                else
                {
                    // le righe dispari le metto con il colore azzurro
                    setBackground(COLOR_VERDE);
                    setForeground(table.getForeground());
                }
            }
            setFont(table.getFont());

            // Formattazione dei valori
            if (value==null)
            {
                return null;
            }
            else{

                // Con switch problemi di costanti
                if (colreale == oMdSfascia.colonnaCOD){
                    this.setHorizontalAlignment(RIGHT);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSfascia.colonnaSTART){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSfascia.colonnaEND){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdSfascia.colonnaINS){
                    this.setHorizontalAlignment(LEFT);
                    this.setText(value.toString());
                }
                return this;
            }
	    }
    }




    // Imposta le singole righe della JTable delle sale
    private void impostaJTRigheSale()
    {
        // JTABLE --> SORTER --> MODELLO
        oMdSsale = new MdSsale();

        // Associa all'oggetto grafico jtable l'oggetto
        // modello appena istanziato
        jTableSale.setModel(oMdSsale);

        // Associazione colonne con RENDERER e impostazione proprietà colonne
        // Istanzio l'oggetto render per le colonne
        // L'oggetto render serve per impostare graficamente la tabella
        RdSsale myRenderer = new RdSsale();
        // Imposto le proprietà delle colonne
        // colonnaCOD
	javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableSale.getColumnModel().getColumn(this.oMdSsale.colonnaCOD);
        oColumn.setMaxWidth(0);
        oColumn.setWidth(0);
        oColumn.setMinWidth(0);
        oColumn.setPreferredWidth(0);
        

        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSsale.colonnaCOD);
        oColumn.setResizable(false);

        // colonnaDESCR
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableSale.getColumnModel().getColumn(this.oMdSsale.colonnaDESCR);
        oColumn.setPreferredWidth(150);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSsale.colonnaDESCR);
        oColumn.setResizable(true);

        oColumn = this.jTableSale.getColumnModel().getColumn(this.oMdSsale.colonnaMQ);
        oColumn.setPreferredWidth(70);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSsale.colonnaMQ);
        oColumn.setResizable(true);

        // colonnaPIANO
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableSale.getColumnModel().getColumn(this.oMdSsale.colonnaPIANO);
        oColumn.setPreferredWidth(70);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSsale.colonnaPIANO);
        oColumn.setResizable(true);

       // colonnaCOSTO
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableSale.getColumnModel().getColumn(this.oMdSsale.colonnaCOSTO);
        oColumn.setPreferredWidth(70);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSsale.colonnaCOSTO);
        oColumn.setResizable(true);

        jTableSale.setRowHeight(20);
        // per lo spostamento delle colonne
        jTableSale.getTableHeader().setReorderingAllowed(false);
        jTableSale.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // per il settaggio del font
        jTableSale.setFont(new Font("Dialog", Font.BOLD, 10));
        // per la griglia
        jTableSale.setShowGrid(false);
        jTableSale.setShowHorizontalLines(false);
        
        // Impostazione dei tasti Home, End, PgDown e PgUp
        // Tasti per movimento nella tabella
        KeyStroke stroke_home   = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, 0);
        KeyStroke stroke_end    = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, 0);
        KeyStroke stroke_pgdown = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, 0);
        KeyStroke stroke_pgup   = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, 0);

        // Implementa l'Ascoltatore per i tasti
        java.awt.event.ActionListener action = new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent event) {

                int nrighe = oMdSsale.getRowCount();
                if (nrighe>0){
                    if (event.getActionCommand().equals("HOME")){
                        jTableSale.setRowSelectionInterval(0,0);
                    }
                    else if (event.getActionCommand().equals("END")){
                        jTableSale.setRowSelectionInterval(nrighe-1,nrighe-1);
                    }
                    else if (event.getActionCommand().equals("PGDOWN")){
                        int rigacor = jTableSale.getSelectedRow();
                        if (rigacor!=-1){
                            rigacor = rigacor+15;
                            if (rigacor>nrighe)
                                rigacor = nrighe;

                        }
                        jTableSale.setRowSelectionInterval(rigacor-1,rigacor-1);
                    }
                    else if (event.getActionCommand().equals("PGUP")){
                        int rigacor = jTableSale.getSelectedRow();
                        if (rigacor!=-1){
                            rigacor = rigacor-15;
                            if (rigacor<1)
                                rigacor = 1;
                        }
                        jTableSale.setRowSelectionInterval(rigacor-1,rigacor-1);

                    }
                    jTableSale.scrollRectToVisible(jTableSale.getCellRect(jTableSale.getSelectedRow(),0, true));

                }
            }
        };

        jTableSale.registerKeyboardAction(action, "HOME", stroke_home, JComponent.WHEN_FOCUSED);
        jTableSale.registerKeyboardAction(action, "END", stroke_end, JComponent.WHEN_FOCUSED);
        jTableSale.registerKeyboardAction(action, "PGDOWN", stroke_pgdown, JComponent.WHEN_FOCUSED);
        jTableSale.registerKeyboardAction(action, "PGUP", stroke_pgup, JComponent.WHEN_FOCUSED);

        // Implementa il codice per la selezione delle righe
        ListSelectionModel lsmRow = jTableSale.getSelectionModel();



}

// Imposta le singole righe della JTable delle fasce orarie
private void impostaJTRigheFasceOrarie()
{
        // JTABLE --> SORTER --> MODELLO
        oMdSfascia = new MdSfascia();

        // Associa all'oggetto grafico jtable l'oggetto
        // modello appena istanziato
        jTableFascia.setModel(oMdSfascia);

        // Associazione colonne con RENDERER e impostazione proprietà colonne
        // Istanzio l'oggetto render per le colonne
        // L'oggetto render serve per impostare graficamente la tabella
        RdSfascia myRenderer = new RdSfascia();
        // Imposto le proprietà delle colonne
        // colonnaCOD
	javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableFascia.getColumnModel().getColumn(this.oMdSfascia.colonnaCOD);
        oColumn.setMaxWidth(0);
        oColumn.setWidth(0);
        oColumn.setMinWidth(0);
        oColumn.setPreferredWidth(0);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSfascia.colonnaCOD);
        oColumn.setResizable(false);

        // colonnaSTART
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableFascia.getColumnModel().getColumn(this.oMdSfascia.colonnaSTART);
        oColumn.setPreferredWidth(60);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSfascia.colonnaSTART);
        oColumn.setResizable(true);

        oColumn = this.jTableFascia.getColumnModel().getColumn(this.oMdSfascia.colonnaEND);
        oColumn.setPreferredWidth(60);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSfascia.colonnaEND);
        oColumn.setResizable(true);

        // colonnaSTATO
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableFascia.getColumnModel().getColumn(this.oMdSfascia.colonnaINS);
        oColumn.setPreferredWidth(90);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdSfascia.colonnaINS);
        oColumn.setResizable(true);

       // colonnaPRENOTA
        //javax.swing.table.TableColumn oColumn=null;
        oColumn=null;
        oColumn = this.jTableFascia.getColumnModel().getColumn(this.oMdSfascia.colonnaPRENOTA);
        oColumn.setPreferredWidth(70);
        oColumn.setCellRenderer(new ButtonRenderer());
        oColumn.setModelIndex(this.oMdSfascia.colonnaPRENOTA);
        oColumn.setResizable(false);
       
        oColumn.setCellEditor(new ButtonEditorPrenota(new JCheckBox(),this.jTableFascia));

        jTableFascia.setRowHeight(20);
        // per lo spostamento delle colonne
        jTableFascia.getTableHeader().setReorderingAllowed(false);

        // per il settaggio del font
        jTableFascia.setFont(new Font("Dialog", Font.BOLD, 10));
        // per la griglia
        jTableFascia.setShowGrid(false);
        jTableFascia.setShowHorizontalLines(false);
        jTableFascia.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         // Impostazione dei tasti Home, End, PgDown e PgUp
        // Tasti per movimento nella tabella
        KeyStroke stroke_home   = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, 0);
        KeyStroke stroke_end    = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, 0);
        KeyStroke stroke_pgdown = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, 0);
        KeyStroke stroke_pgup   = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, 0);

        // Implementa l'Ascoltatore per i tasti
        java.awt.event.ActionListener action = new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent event) {

                int nrighe = oMdSfascia.getRowCount();
                if (nrighe>0){
                    if (event.getActionCommand().equals("HOME")){
                        jTableFascia.setRowSelectionInterval(0,0);
                    }
                    else if (event.getActionCommand().equals("END")){
                        jTableFascia.setRowSelectionInterval(nrighe-1,nrighe-1);
                    }
                    else if (event.getActionCommand().equals("PGDOWN")){
                        int rigacor = jTableFascia.getSelectedRow();
                        if (rigacor!=-1){
                            rigacor = rigacor+15;
                            if (rigacor>nrighe)
                                rigacor = nrighe;

                        }
                        jTableFascia.setRowSelectionInterval(rigacor-1,rigacor-1);
                    }
                    else if (event.getActionCommand().equals("PGUP")){
                        int rigacor = jTableFascia.getSelectedRow();
                        if (rigacor!=-1){
                            rigacor = rigacor-15;
                            if (rigacor<1)
                                rigacor = 1;
                        }
                        jTableFascia.setRowSelectionInterval(rigacor-1,rigacor-1);

                    }
                    jTableFascia.scrollRectToVisible(jTableFascia.getCellRect(jTableFascia.getSelectedRow(),0, true));

                }
            }
        };

        jTableFascia.registerKeyboardAction(action, "HOME", stroke_home, JComponent.WHEN_FOCUSED);
        jTableFascia.registerKeyboardAction(action, "END", stroke_end, JComponent.WHEN_FOCUSED);
        jTableFascia.registerKeyboardAction(action, "PGDOWN", stroke_pgdown, JComponent.WHEN_FOCUSED);
        jTableFascia.registerKeyboardAction(action, "PGUP", stroke_pgup, JComponent.WHEN_FOCUSED);

        // Implementa il codice per la selezione delle righe
        ListSelectionModel lsmRow = jTableFascia.getSelectionModel();



}

//********** MODELLO PARTICOLARE PER LA GESTIONE DELLA JTABLE **********//
private class MdSsale extends javax.swing.table.AbstractTableModel implements java.io.Serializable
{
        /** Righe del profilo
        */
        private Vector vRigheModello;

        // Colonne del modello (final = Costanti)
        final private int  colonnaCOD          = 0;
        final private int  colonnaDESCR        = 1;
        final private int  colonnaMQ           = 2;
        final private int  colonnaPIANO          = 3;
        final private int  colonnaCOSTO     = 4;


        // definisco una variabile di tipo record
        final String[] columnNames = new String[5];

        private MdSsale()
        {
            // Inserisco nella variabile di tipo record
            // le intestazioni delle colonne
            columnNames[colonnaCOD]            = "Codice";
            columnNames[colonnaDESCR]          = "Nome Sala";
            columnNames[colonnaMQ]             = "Metri Quadrati";
            columnNames[colonnaPIANO]          = "Piano";
            columnNames[colonnaCOSTO]          = "Costo";
            
        }

        // Imposta la righe associate al modello
        private void setProfilo(Vector vRighe)
        {
            this.vRigheModello = vRighe;
        }

        private Vector getProfilo()
        {
            return this.vRigheModello;
        }

        // Numero colonne JTABLE
        public int getColumnCount()
        {
            return columnNames.length;
        }

        // Numero righe JTABLE
        public int getRowCount()
        {
            if (this.vRigheModello == null)
                return 0;
            else
                return vRigheModello.size();
        }

        // Intestazione colonne JTABLE
        public String getColumnName(int col)
        {
            return columnNames[col];
        }

        // valore celle JTABLE
        // Legge il valore contenuto in una cella
        public Object getValueAt(int row, int col)
        {
            // row   =   riga
            // col   =   colonna

            // mi posizioni sulla riga desiderata
            Object[] Valori = (Object[])vRigheModello.elementAt(row);

            // mi posiziono sulla colonna desiderata
            switch (col)
            {

                case colonnaCOD:
                    return Valori[colonnaCOD];
                 case colonnaDESCR:
                    return Valori[colonnaDESCR];
                case colonnaMQ:
                    return Valori[colonnaMQ];
                case colonnaPIANO:
                    return Valori[colonnaPIANO];
                case colonnaCOSTO:
                    return Valori[colonnaCOSTO];
                default:
                    return "";
            }
        }


        public Class getColumnClass(int c)
        {
            return getValueAt(0, c).getClass();
        }

        /* Determina quali sono le celle editabili, e quando devono diventare editabili
         **/
        public boolean isCellEditable(int row, int col) {

            Object sVt[] = (Object[])vRigheModello.elementAt(row);
            //sPFOR = sVt[col].toString();
            //return col == 0 || col == 1 || col == 2 || col == 3 || StatoMaschera == 2 || StatoMaschera == 1;

            return false;
        }

        /**********************************************/
        /* Serve per impostare il valore ad una cella */
        /**********************************************/
        public void setValueAt(Object value, int row, int col)
        {
            Object oVal[] = (Object[])vRigheModello.elementAt(row);
                 switch (col)
                 {

                   case colonnaCOD:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaCOD] = "";
                        }else{
                            oVal[colonnaCOD] = value.toString();
                        }
                        break;
                    case colonnaDESCR:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaDESCR] = "";
                        }else{
                            oVal[colonnaDESCR] = value.toString();
                        }
                        break;

                    case colonnaMQ:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaMQ] = "";
                        }else{
                            oVal[colonnaMQ] = value.toString();
                        }
                        break;

                    case colonnaPIANO:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaPIANO] = "";
                        }else{
                            oVal[colonnaPIANO] = value.toString();
                        }
                        break;
                    case colonnaCOSTO:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaCOSTO] = "";
                        }else{
                            oVal[colonnaCOSTO] = value.toString();
                        }
                        break;


                    default:
                        System.out.println("SET RIGHE NON EDITABILI");

                }
                fireTableCellUpdated(row, col);
        }

        /************************/
        /* Rinfresca la JTABLE  */
        /************************/
        private void aggiorna()
        {
            fireTableDataChanged(); // Tell the listeners a new table has arrived.
        }

        /***********************************************/
        /*  Rinfresca la JTABLE per la riga cancellata */
        /***********************************************/
        private void cancella(int riga){
            this.fireTableRowsDeleted(riga, riga);
        }

	    
    }



//********** MODELLO PARTICOLARE PER LA GESTIONE DELLA JTABLE **********//
private class MdSfascia extends javax.swing.table.AbstractTableModel implements java.io.Serializable
{
        /** Righe del profilo
        */
        private Vector vRigheModello;

        // Colonne del modello (final = Costanti)
        final private int  colonnaCOD            = 0;
        final private int  colonnaSTART          = 1;
        final private int  colonnaEND            = 2;
        final private int  colonnaINS            = 3;
        final private int  colonnaPRENOTA        = 4;


        // definisco una variabile di tipo record
        final String[] columnNames = new String[5];

        private MdSfascia()
        {
            // Inserisco nella variabile di tipo record
            // le intestazioni delle colonne
            columnNames[colonnaCOD]            = "Prenotazione";
            columnNames[colonnaSTART]          = "Inizio";
            columnNames[colonnaEND]            = "Fine";
            columnNames[colonnaINS]            = "Insegnamento";
            columnNames[colonnaPRENOTA]        = "Scegli";
        }

        // Imposta la righe associate al modello
        private void setProfilo(Vector vRighe)
        {
            this.vRigheModello = vRighe;
        }

        private Vector getProfilo()
        {
            return this.vRigheModello;
        }

        // Numero colonne JTABLE
        public int getColumnCount()
        {
            return columnNames.length;
        }

        // Numero righe JTABLE
        public int getRowCount()
        {
            if (this.vRigheModello == null)
                return 0;
            else
                return vRigheModello.size();
        }

        // Intestazione colonne JTABLE
        public String getColumnName(int col)
        {
            return columnNames[col];
        }

        // valore celle JTABLE
        // Legge il valore contenuto in una cella
        public Object getValueAt(int row, int col)
        {
            // row   =   riga
            // col   =   colonna

            // mi posizioni sulla riga desiderata
            Object[] Valori = (Object[])vRigheModello.elementAt(row);

            // mi posiziono sulla colonna desiderata
            switch (col)
            {

                case colonnaCOD:
                    return Valori[colonnaCOD];
                 case colonnaSTART:
                    return Valori[colonnaSTART];
                case colonnaEND:
                    return Valori[colonnaEND];
                case colonnaINS:
                    return Valori[colonnaINS];
                case colonnaPRENOTA:
                    return Valori[colonnaPRENOTA];
                default:
                    return "";
            }
        }


        public Class getColumnClass(int c)
        {
            return getValueAt(0, c).getClass();
        }

        /* Determina quali sono le celle editabili, e quando devono diventare editabili
         **/
        public boolean isCellEditable(int row, int col) {

            Object sVt[] = (Object[])vRigheModello.elementAt(row);
            //sPFOR = sVt[col].toString();
            if ((col == 4))
                    return true;
                else
                    return false;

            //return col == 0 || col == 1 || col == 2 || col == 3 || StatoMaschera == 2 || StatoMaschera == 1;

            
        }

        /**********************************************/
        /* Serve per impostare il valore ad una cella */
        /**********************************************/
        public void setValueAt(Object value, int row, int col)
        {
            Object oVal[] = (Object[])vRigheModello.elementAt(row);
                 switch (col)
                 {

                   case colonnaCOD:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaCOD] = "";
                        }else{
                            oVal[colonnaCOD] = value.toString();
                        }
                        break;
                    case colonnaSTART:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaSTART] = "";
                        }else{
                            oVal[colonnaSTART] = value.toString();
                        }
                        break;

                    case colonnaEND:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaEND] = "";
                        }else{
                            oVal[colonnaEND] = value.toString();
                        }
                        break;

                    case colonnaINS:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaINS] = "";
                        }else{
                            oVal[colonnaINS] = value.toString();
                        }
                        break;
                    case colonnaPRENOTA:
                        if (value == null)
                        {
                            // Default
                            oVal[colonnaPRENOTA] = "";
                        }else{
                            oVal[colonnaPRENOTA] = value.toString();
                        }
                        //setPrenota();

                        break;


                    default:
                        System.out.println("SET RIGHE NON EDITABILI");

                }
                fireTableCellUpdated(row, col);
        }

        /************************/
        /* Rinfresca la JTABLE  */
        /************************/
        private void aggiorna()
        {
            fireTableDataChanged(); // Tell the listeners a new table has arrived.
        }

        /***********************************************/
        /*  Rinfresca la JTABLE per la riga cancellata */
        /***********************************************/
        private void cancella(int riga){
            this.fireTableRowsDeleted(riga, riga);
        }

	   
    }



    //*********** FINE CLASSE SUPPORTO **********//

    // Classe per gestire il rendere della JTable
    // in teoria deve essere una classe di render per ogni
    // colonna.
    // In questo caso siccome tutte le colonne sono di tipo testo
    // viene usata una sola classe di render su tutte le colonne.
    private class RdS extends javax.swing.JTextField implements javax.swing.table.TableCellRenderer
    {
        // Impostazione dei colori di sfondo
        private Color COLOR_ROSSO    = new Color(254,95,90);
        private Color COLOR_GIALLO   = new Color(255,255,166);
        private Color COLOR_VERDE    = new Color(104,240,162);
        private Color COLOR_BIANCO   = java.awt.Color.white;
        private Color COLOR_AZZURRO  = new Color(217,230,249);
        private Color COLOR_ARANCIO  = new Color(255,151,81);
        private Color COLOR_VERDINO  = new Color(202,255,176);


	    private RdS()
	    {
	        super();
	    }

	    /******************************************************/
        /* Il metodo viene richiamato dalla JTABLE in fase di */
        /* popolamento celle                                  */
        /******************************************************/
        public Component getTableCellRendererComponent(JTable table,
                                                       Object value,
                                                       boolean isSelected,
                                                       boolean hasFocus,
                                                       int row,
                                                       int column){
            /**************************************************************************/
            /* table      = Nome della tabella                                        */
            /* value      = Valore della cella                                        */
            /* isSelected = true  cella selezionata                                   */
            /*              false cella non selezionata                               */
            /* hasFocus   = true  ha il fuoco                                         */
            /*              false non ha il fuoco                                     */
            /* row        = riga                                                      */
            /* column     = posizione della colonna a video.                          */
            /*              Nel caso di drag and drop colonne è necessario convertire */
            /*              la colonna a video nella colonna reale.                   */
            /*    NB: in fase di init JTABLE è necessario utilizzare (setModelIndex)  */
            /**************************************************************************/

            // Prelevo il valore reale della colonna e la metto in colreale
            javax.swing.table.TableColumn tc = table.getColumnModel().getColumn(column);
            int colreale = tc.getModelIndex();
            //mr = (ModListaPresenti)table.getModel();

            // Colore delle righe
            if (isSelected)
            {
                // Imposto il colore di default
                setBackground(COLOR_GIALLO);
                setForeground(table.getSelectionForeground());
            }
            else
            {
                if ((row % 2) == 0)
                {
                    // le righe pari le metto con lo sfondo bianco
                    setBackground(COLOR_BIANCO);
                    setForeground(table.getForeground());
                }
                else
                {
                    // le righe dispari le metto con il colore azzurro
                    setBackground(COLOR_BIANCO);
                    setForeground(table.getForeground());
                }
            }
            setFont(table.getFont());

            // Formattazione dei valori
            if (value==null)
            {
                return null;
            }
            else{

                // Con switch problemi di costanti
                if (colreale == oMdS.colonnaD){
                    this.setHorizontalAlignment(CENTER);
                    this.setForeground(COLOR_ROSSO);
                    this.setText(value.toString());
                }
                else if (colreale == oMdS.colonna2){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdS.colonna3){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdS.colonna4){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdS.colonna5){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdS.colonna6){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                else if (colreale == oMdS.colonna7){
                    this.setHorizontalAlignment(CENTER);
                    this.setText(value.toString());
                }
                return this;
            }
	    }
    }

       /**
        *  gestisce la prenotazione della sala nella fascia oraria selezionata
        * @return
        */
       /*public boolean setPrenota(){
         
           return true;
       }*/

   // Imposta le singole righe della JTable Calendario
    private void impostaJTRighe()
    {
        // JTABLE --> SORTER --> MODELLO
        oMdS = new MdS();

        // Associa all'oggetto grafico jtable l'oggetto
        // modello appena istanziato
        jTableCalendario.setModel(oMdS);

        // Associazione colonne con RENDERER e impostazione proprietà colonne
        // Istanzio l'oggetto render per le colonne
        // L'oggetto render serve per impostare graficamente la tabella
        RdS myRenderer = new RdS();
        // Imposto le proprietà delle colonne
        // colonnaD
	javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonnaD);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonnaD);
        oColumn.setResizable(false);

        // colonna2
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonna2);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonna2);
        oColumn.setResizable(true);

        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonna3);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonna3);
        oColumn.setResizable(true);

        // colonna4
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonna4);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonna4);
        oColumn.setResizable(true);

       // colonna5
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonna5);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonna5);
        oColumn.setResizable(true);

        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonna6);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonna6);
        oColumn.setResizable(true);

        // colonna7
        //javax.swing.table.TableColumn oColumn=null;
        oColumn = this.jTableCalendario.getColumnModel().getColumn(this.oMdS.colonna7);
        oColumn.setPreferredWidth(50);
        oColumn.setCellRenderer(myRenderer);
        oColumn.setModelIndex(this.oMdS.colonna7);
        oColumn.setResizable(true);

        // Modalità selezione
        jTableCalendario.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableCalendario.setCellSelectionEnabled(true);
        // per le linee verticali nella selezione
        jTableCalendario.setShowVerticalLines(true);
        // per la griglia
        jTableCalendario.setShowGrid(true);
        jTableCalendario.setIntercellSpacing(new Dimension(0, 0));
        jTableCalendario.setAutoResizeMode(jTableCalendario.AUTO_RESIZE_OFF);
        jTableCalendario.setShowHorizontalLines(true);
        jTableCalendario.setRowHeight(30);
        // per lo spostamento delle colonne
        jTableCalendario.getTableHeader().setReorderingAllowed(false);

        // per il settaggio del font
        jTableCalendario.setFont(new Font("Dialog", Font.BOLD, 15));
        // Impostazione dei tasti Home, End, PgDown e PgUp
        // Tasti per movimento nella tabella
        KeyStroke stroke_home   = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, 0);
        KeyStroke stroke_end    = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, 0);
        KeyStroke stroke_pgdown = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, 0);
        KeyStroke stroke_pgup   = KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, 0);

        // Implementa l'Ascoltatore per i tasti
        java.awt.event.ActionListener action = new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent event) {

                int nrighe = oMdS.getRowCount();
                if (nrighe>0){
                    if (event.getActionCommand().equals("HOME")){
                        jTableCalendario.setRowSelectionInterval(0,0);
                    }
                    else if (event.getActionCommand().equals("END")){
                        jTableCalendario.setRowSelectionInterval(nrighe-1,nrighe-1);
                    }
                    else if (event.getActionCommand().equals("PGDOWN")){
                        int rigacor = jTableCalendario.getSelectedRow();
                        if (rigacor!=-1){
                            rigacor = rigacor+15;
                            if (rigacor>nrighe)
                                rigacor = nrighe;

                        }
                        jTableCalendario.setRowSelectionInterval(rigacor-1,rigacor-1);
                    }
                    else if (event.getActionCommand().equals("PGUP")){
                        int rigacor = jTableCalendario.getSelectedRow();
                        if (rigacor!=-1){
                            rigacor = rigacor-15;
                            if (rigacor<1)
                                rigacor = 1;
                        }
                        jTableCalendario.setRowSelectionInterval(rigacor-1,rigacor-1);

                    }
                    jTableCalendario.scrollRectToVisible(jTableCalendario.getCellRect(jTableCalendario.getSelectedRow(),0, true));

                }
            }
        };

        jTableCalendario.registerKeyboardAction(action, "HOME", stroke_home, JComponent.WHEN_FOCUSED);
        jTableCalendario.registerKeyboardAction(action, "END", stroke_end, JComponent.WHEN_FOCUSED);
        jTableCalendario.registerKeyboardAction(action, "PGDOWN", stroke_pgdown, JComponent.WHEN_FOCUSED);
        jTableCalendario.registerKeyboardAction(action, "PGUP", stroke_pgup, JComponent.WHEN_FOCUSED);

        // Implementa il codice per la selezione delle righe
        ListSelectionModel lsmRow = jTableCalendario.getSelectionModel();



}
/** Carica righe del calendario
	*/
    protected void elaboro(int Giorni,int Mese,int GiornoCorrente){


        Vector vtElementi = new Vector();
        for (int index = 0; index < 6; index ++)
        {

                // dichiaro una variabile stringa di record
                Object[] Valori = new Object[7];
                    // carico la tabella con i dati del vettore
                Valori[oMdS.colonnaD]           = "" ;
                Valori[oMdS.colonna2]           = "" ;
                Valori[oMdS.colonna3]           = "" ;
                Valori[oMdS.colonna4]           = "" ;
                Valori[oMdS.colonna5]           = "" ;
                Valori[oMdS.colonna6]           = "" ;
                Valori[oMdS.colonna7]           = "" ;

                vtElementi.addElement(((Object) (Valori)));
        }

        // Aggiunge gli Elementi del Vettore al Modello della JTable
        oMdS.setProfilo(vtElementi);

        // Aggiorna la JTable
        oMdS.aggiorna();

        // verifica da quale colonna deve partire
        int colonna = 0;
        int Anno = Integer.parseInt(this.numAnno.getText());
        String Data = Generic.getSDateFromInt(01, Mese, Anno);
        String stringa = "" + Generic.getPrimoGiornoMeseCorrente(Generic.getUtilDateFromS(Data));
        if(stringa.substring(0, 3).equals("Sun")){

                        colonna = 0;
        }else if(stringa.substring(0, 3).equals("Mon")){

                    colonna = 1;
        }else if(stringa.substring(0, 3).equals("Tue")){

                    colonna = 2;
        }else if(stringa.substring(0, 3).equals("Wed")){

                    colonna = 3;
        }else if(stringa.substring(0, 3).equals("Thu")){

                    colonna = 4;
        }else if(stringa.substring(0, 3).equals("Fri")){

                    colonna = 5;
        }else if(stringa.substring(0, 3).equals("Sat")){

                    colonna = 6;
        }


        int i = 0;
        for (int index = 0; index < 6; index ++)
        {

               for (int col =colonna; col < 7; col ++ ){

    		        i= calcola(i,Giorni, index, col,GiornoCorrente);


               }

               colonna = 0;

        }


    }

    /**  verifica il numero passato che non sia maggiore o al massimo uguale al mese in questione
    */
    private int calcola(int numero,int Giorni, int riga, int colonna,int GiornoCorrente){




           if(numero != -1)	 {

                numero=numero+1;


    	        if (numero > Giorni) {
    	            for (int i=colonna; i < 7; i++ ){
    	                jTableCalendario.setValueAt("", riga , this.dammiIndiceColonna(i, jTableCalendario));
    	            }
    	            return -1;
    	        }else{
    	            jTableCalendario.setValueAt("" + numero, riga , this.dammiIndiceColonna(colonna, jTableCalendario) );
    	            // gestisce la selezione automatica del giorno corrente
    	            if(numero == GiornoCorrente){

                        // mi posiziono sulla prima riga della tabella
                        if(jTableCalendario.getRowCount() > 0){
                        jTableCalendario.setColumnSelectionInterval(colonna , colonna);
                        jTableCalendario.setRowSelectionInterval(riga, riga);
                        //jTableModello.editCellAt(jTableModello.getSelectedRow(), 0);

                        jTableCalendario.requestFocus();

                        }
                    }

    	        }


    	   }






    	return numero;
    }



    /**  carica le sale
    */
    private void caricaSale(){


	    //String sCondizione = creaCondizioneRicerca();
            String sCondizione = "";
    	    vtDati.removeAllElements();
    	    vtDati = Sale.getLista(sCondizione);

    	     if (vtDati.size() <= 0){
    	       Generic.notifica("Nessun Record trovato per la Selezione impostata!", 2);
    	       return;
    	    }

	        Vector vtElementi = new Vector();
    		for (int index = 0; index < vtDati.size(); index ++)
	 	{
		        Sale oSale = (Sale)(vtDati.elementAt(index));
                        // dichiaro una variabile stringa di record
	                String[] Valori = new String[5];
		        // carico la tabella con i dati del vettore
    		        Valori[oMdSsale.colonnaCOD]       = "" + oSale.Cod_Sala;
                        Valori[oMdSsale.colonnaDESCR]     = "" + oSale.Descr;
                        Valori[oMdSsale.colonnaMQ]     = "" + new BigDecimal("" + oSale.Mq).toString().replace('.',',');
                        Valori[oMdSsale.colonnaPIANO]       = "" + oSale.Piano;
                        Valori[oMdSsale.colonnaCOSTO]  = "";

                        vtElementi.addElement(Valori);
                }

		// Aggiunge gli Elementi del Vettore al Modello della JTable
		oMdSsale.setProfilo(vtElementi);

		// Aggiorna la JTable
                oMdSsale.aggiorna();

                // mi posiziono sulla prima riga della tabella
                if(jTableSale.getRowCount() > 0){
                  jTableSale.setRowSelectionInterval(0,0);
                }
                jTableSale.requestFocus();

		// Abilita il Pannello della Lista
		//jtpSelezionePannello.setEnabledAt(1, true);
                //jtpSelezionePannello.setSelectedComponent(jpLista);


    }

    /**  carica lista prenotazioni
    */
    private void caricaPrenotazioni(){

            String oreIni  = "14";
            String oreFine = "20";
            String minuti = "00";

	    //String sCondizione = creaCondizioneRicerca();
            //String sCondizione = "";
    	    //vtDati.removeAllElements();
    	    //vtDati = Sale.getLista(sCondizione);

    	     //if (vtDati.size() <= 0){
    	     //  Generic.notifica("Nessun Record trovato per la Selezione impostata!", 2);
    	     //  return;
    	     //}

	           int ore = this.jcbOra.getSelectedIndex();
                   
                   BigDecimal num = new BigDecimal("" +oreIni + "." + minuti );

                   int fine = 50;
                   Vector vtElementi = new Vector();
    		   for (int i = 0; i < fine; i++){
                       String[] Valori = new String[5];
                       Valori[oMdSfascia.colonnaCOD]  = "" + i+1;
                       Valori[oMdSfascia.colonnaSTART]  = "" + num.toString();
                       // 30 minuti
                       if(this.jcbOra.getSelectedIndex() ==0){
                            if((i % 2) == 0){ 
                               num = num.add(new BigDecimal("0.30"));
                            }else {
                               String tempOra = num.toString();
                               tempOra = tempOra.substring(0, 2).toString();
                               int val = Integer.parseInt(tempOra) +1;
                               num = new BigDecimal("" + val  + "." + minuti  );
                            }
                       // 1 ora
                       }else if(this.jcbOra.getSelectedIndex() ==1){
                            num = num.add(new BigDecimal("1.00"));
                       // 2 ore
                       }else if(this.jcbOra.getSelectedIndex() ==2){
                             num = num.add(new BigDecimal("2.00"));
                       // 3 ore
                       }else if(this.jcbOra.getSelectedIndex() ==3){
                             num = num.add(new BigDecimal("3.00"));
                       // 24 ore
                       }else if(this.jcbOra.getSelectedIndex() ==4){
                             num = num.add(new BigDecimal("6.00"));

                       }

                       Valori[oMdSfascia.colonnaEND]  = "" + num.toString();
                       Valori[oMdSfascia.colonnaINS]  = "";
                       Valori[oMdSfascia.colonnaPRENOTA]  = "";
                       vtElementi.addElement(Valori);
                       if(num.intValue() == new BigDecimal("" + oreFine +"." + minuti).intValue()){
                           i= fine;
                       }
                   }
                  
                // Aggiunge gli Elementi del Vettore al Modello della JTable
		oMdSfascia.setProfilo(vtElementi);

		// Aggiorna la JTable
                oMdSfascia.aggiorna();

                // mi posiziono sulla prima riga della tabella
                if(jTableFascia.getRowCount() > 0){
                  jTableFascia.setRowSelectionInterval(0,0);
                }
                jTableFascia.requestFocus();

		// Abilita il Pannello della Lista
		//jtpSelezionePannello.setEnabledAt(1, true);
                //jtpSelezionePannello.setSelectedComponent(jpLista);


    }

    /*  Imposta le immagini relative ad ogni bottone
     */
    private void settaImmaginiPulsanti(){

         String path = "Images/";

         ImageIcon imiSinistra = new ImageIcon(path + "sinistra.gif");
         this.jbtSinistra.setIcon(imiSinistra);
         ImageIcon imiDestra = new ImageIcon(path + "destra.gif");
         this.jbtDestra.setIcon(imiDestra);
         ImageIcon imiUscita = new ImageIcon(path + "uscita24.gif");
         this.jbtEsci.setIcon(imiUscita);
         ImageIcon imiInsert = new ImageIcon(path + "inserimento24.gif");
         this.jbtNuovo.setIcon(imiInsert);
         ImageIcon imiRicerca = new ImageIcon(path + "ricerca24.gif");
         this.jbtRicerca.setIcon(imiRicerca);
         ImageIcon imiModifica = new ImageIcon(path + "modifica24.gif");
         this.jbtModifica.setIcon(imiModifica);
         ImageIcon imiElimina = new ImageIcon(path + "cancella24.gif");
         jbtElimina.setIcon(imiElimina);
         // impostazione  del menu' di in alto alle prenotazioni
         ImageIcon impostazioni = new ImageIcon(path + "impostazioni.gif");
         this.menu2.setIcon(impostazioni);
         ImageIcon menu = new ImageIcon(path + "menu.gif");
         this.menu1.setIcon(menu);
         ImageIcon regUtenti = new ImageIcon(path + "reg.gif");
         this.menuInsert.setIcon(regUtenti);
         ImageIcon folder = new ImageIcon(path + "folder.gif");
         this.jtpSelezione.setIconAt(0, folder);
         this.jtpSelezione.setIconAt(1, folder);
         this.jtpSelezione.setIconAt(2, folder);



         
    }


    /** Ritorna l'Indice della colonna quando viene spostata
    */
    private int dammiIndiceColonna(int Indice, javax.swing.JTable jTOggetto){
        for (int i=0;i< jTOggetto.getColumnCount();i++){
		    javax.swing.table.TableColumn tc = jTOggetto.getColumnModel().getColumn(i);
            if (tc.getModelIndex()==Indice){
                return i;
            }
        }
        return Indice;


    }

    /**
     * Renderer per il pulsante prenota
     */
    private class ButtonRenderer extends JButton implements TableCellRenderer {

        private ButtonRenderer() {
            setOpaque(true);
            setSize(0,0);
            setText("PRENOTA");

	}

        /**
         * Renderer per il pulsante PRENOTA
         * @param table
         * @param value
         * @param isSelected
         * @param hasFocus
         * @param row
         * @param column
         * @return
         */
        public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

            javax.swing.table.TableColumn tc = table.getColumnModel().getColumn(column);
            int colreale = tc.getModelIndex();

            if (colreale == oMdSfascia.colonnaPRENOTA){
               if (isSelected) {
                  setForeground(table.getSelectionForeground());
                  setBackground(table.getSelectionBackground());
               } else{
                  setForeground(table.getForeground());
                  setBackground(UIManager.getColor("Button.background"));
            }
            // Aumento la dimensione del Carattere
            if(isSelected){
                Font f = table.getFont();
                setFont(new Font(f.getName(), Font.BOLD, f.getSize()));

                //this.setBorder(bevelBorder1);
            }

              //setText( (value ==null) ? "" : value.toString() );
              setText("PRENOTA");
            }
            return this;
        }
    }

    /** Controlla che ci siano prenotazioni nell'arco di 10 minuti
     */
    public void ricavaAvvisi() {
               // ascoltatore
		AscoltaAvvisi listener = new AscoltaAvvisi();
		// preparazione dei processi
		Avvisi task = new Avvisi();
		// creazine dello scheduler
		Scheduler scheduler = new Scheduler();
		// registra ascoltatore
		scheduler.addSchedulerListener(listener);
		//ogni minuto scatta
		scheduler.schedule("* * * * *", task);
		// avvia lo scheduler
		scheduler.start();
		// si riposa per 5 minuti e poi riparte
		try {
			Thread.sleep(5L * 60L * 1000L);
		} catch (InterruptedException e) {
			;
		}
		// stop dello scheduler
		scheduler.stop();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableCalendario;
    private javax.swing.JTable jTableFascia;
    private javax.swing.JTable jTableSale;
    private javax.swing.JButton jbtDestra;
    private javax.swing.JButton jbtElimina;
    private javax.swing.JButton jbtEsci;
    private javax.swing.JButton jbtModifica;
    private javax.swing.JButton jbtNuovo;
    private javax.swing.JButton jbtRicerca;
    private javax.swing.JButton jbtSinistra;
    private javax.swing.JComboBox jcbMese;
    private javax.swing.JComboBox jcbOra;
    private javax.swing.JPanel jp1;
    private javax.swing.JPanel jpDettaglio;
    private javax.swing.JPanel jpInfo;
    private javax.swing.JPanel jpLeggiPren;
    private javax.swing.JPanel jpLista;
    private javax.swing.JPanel jpRicerca;
    private javax.swing.JPanel jpSale;
    private javax.swing.JPanel jpUtente;
    private javax.swing.JTextField jtfTotale;
    private javax.swing.JTabbedPane jtpSelezione;
    private javax.swing.JLabel lblCognome;
    private javax.swing.JLabel lblNome;
    private javax.swing.JMenu menu1;
    private javax.swing.JMenu menu2;
    private javax.swing.JMenuBar menuBarra;
    private javax.swing.JMenuItem menuInsert;
    private javax.swing.JTextField numAnno;
    private javax.swing.JScrollPane scrollCalendario;
    private javax.swing.JScrollPane scrollFascia;
    private javax.swing.JScrollPane scrollLista;
    private javax.swing.JScrollPane scrollSale;
    // End of variables declaration//GEN-END:variables

}
